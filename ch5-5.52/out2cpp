#!/usr/bin/env ruby
# coding: utf-8

require 'strscan'
require './cons'
require './generator'

# for debug
# require 'ruby-debug-ide'
# require 'debase'

def tokenize str
  scanner = StringScanner.new(str)
  tokenized = []

  until scanner.eos?
    scanner.scan(/\s+/) ? nil :
    scanner.scan(/\(/) ? tokenized << scanner.matched :
    scanner.scan(/\)/) ? tokenized << scanner.matched :
    scanner.scan(/[a-z0-9A-Z\;\:\"\'\-\=\_\*\?\!\>\<\/]+/) ? tokenized << scanner.matched :
    nil
  end
  tokenized
end

# todo implement
def atom token
  return token
end

def read_from tokens
  token = tokens[0]
  tokens.delete_at(0)

  if token == "("
    cell = ConsCell.new
    while tokens[0] != ")"
      cell.push read_from tokens
    end

    tokens.delete_at(0)
    return cell
  end
  return atom token
end

def replace_scm_chars tokens
  r = Array.new
  # replace chars that cannot use in C++ source
  tokens.each { |token|
    token.gsub!("?", "_")
    token.gsub!("!", "__")
    token.gsub!("-", "_")
    r << token
  }
  r
end


if ARGV.size == 0
  puts "usage: out2cpp inputfile"
  exit
end

inputFileName = ARGV[0]
outputCppFileName = File.basename(inputFileName, ".out") + ".cpp"
outputHeaderFileName = File.basename(inputFileName, ".out") + ".h"

input = File.open(inputFileName)
vmSource = input.read

puts "creating tokens..."
tokens = tokenize(vmSource)
tokens = replace_scm_chars(tokens)
parsed = read_from tokens


result_registers_list = car(parsed)
modified_registers_list = cadr(parsed)
codes_list = car cddr(parsed)
puts "generating codes.."

def linear_list_to_array list
  r = Array.new
  if car(list)
    r << car(list)
  end

  if cdr(list)
    r << linear_list_to_array(cdr(list))
  end

  r.flatten
end

result_registers = linear_list_to_array(result_registers_list) # maybe unnessessary
modified_registers = linear_list_to_array(modified_registers_list) # maybe unnessessary
codes = linear_list_to_array(codes_list)

# code with labels 
labeled_codes = Array.new
labeled_codes << Array.new
labeled_codes[0] << "compiled_code_entry" 


codes.each {|code|
  labeled_codes[-1] << code
}

prototypes = generate_prototypes labeled_codes
functions = generate_functions labeled_codes

out = open(outputCppFileName, "w")
out.puts "#include \"#{outputHeaderFileName}\""
functions.each { |function|
  p function
  out.puts function
}
out.close


out = open(outputHeaderFileName, "w")
out.puts "#pragma once"
prototypes.each { |prototype|
  out.puts prototype
}
