#!/usr/bin/env ruby
# coding: utf-8

require 'strscan'
require './cons'



def tokenize str
  scanner = StringScanner.new(str)
  tokenized = []

  until scanner.eos?
    p scanner.charpos
    scanner.scan(/\s+/) ? nil : 
    scanner.scan(/\(/) ? tokenized << scanner.matched :
    scanner.scan(/\)/) ? tokenized << scanner.matched :
    scanner.scan(/[a-z0-9A-Z\;\:\"\'\-\=\_\*\?\!\>\<\/]+/) ? tokenized << scanner.matched :
    nil                                                    
  end
  tokenized  
end

# todo implement
def atom token
  token
end

def read_from tokens
  token = tokens[0]
  tokens.delete_at(0)

  if token == "("
    cell = ConsCell.new
    while tokens[0] != ")"
      cell.push read_from tokens
    end
    
    tokens.delete_at(0)
    return cell
  end
  return atom token
end

if ARGV.size == 0
  puts "usage: out2cpp inputfile"
  exit
end

inputFileName = ARGV[0]
outputFileName = File.basename(inputFileName, ".out") + ".cpp"

input = File.open(inputFileName)
vmSource = input.read

tokens = tokenize(vmSource)
parsed = read_from tokens


modified_registers_list = car(parsed)
result_registers_list = cadr(parsed)
codes_list = cddr(parsed)

def linear_list_to_array list
  r = Array.new
  if car(list)
    r << car(list)
  end

  if cdr(list)
    r << linear_list_to_array(cdr(list))
  end

  r.flatten
end

# under construction
def code_to_array list
  list
end

modified_registers = linear_list_to_array(modified_registers_list)
result_registers = linear_list_to_array(result_registers_list)
codes = code_to_array(codes_list)


out = open(outputFileName, "w")
# out.puts("//")
out.close
