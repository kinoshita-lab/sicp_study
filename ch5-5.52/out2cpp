#!/usr/bin/env ruby
# coding: utf-8

require 'strscan'
require './cons'
require './generator'

# for debug
# require 'ruby-debug-ide'
# require 'debase'

def tokenize strArray
  tokenizedArray = []

  strArray.each {|str|
    scanner = StringScanner.new(str)
    tokenized = []

    until scanner.eos?
      scanner.scan(/\".*\"/) ? tokenized << scanner.matched :
      scanner.scan(/\s+/) ? nil :
      scanner.scan(/\(/) ? tokenized << scanner.matched :
      scanner.scan(/\)/) ? tokenized << scanner.matched :
      scanner.scan(/[a-z0-9A-Z\;\:\"\'\-\=\_\+\*\?\!\>\<\/]+/) ? tokenized << scanner.matched :
      nil
    end
    
    tokenizedArray << tokenized
  }

  tokenizedArray
end

# todo implement
def atom token
  return token
end

def read_from_each tokens
  token = tokens[0]
  tokens.delete_at(0)

  if token == "("
    cell = ConsCell.new
    while tokens[0] != ")"
      cell.push read_from_each tokens
    end

    tokens.delete_at(0)
    return cell
  end
  return atom token
end

def read_from tokensArray
  r = []
  tokensArray.each {|tokens|
    r << read_from_each(tokens)
  }

  r
end

def replace_scm_chars tokensArray
  replacedArray = []

  tokensArray.each {|tokens|
  
    r = []
  
    # replace chars that cannot use in C++ source
    tokens.each { |token|
      if (token === "-") # 引き算の - は許す
        r << token
        next
      end
      token.gsub!("?", "_p")
      token.gsub!("!", "")
      token.gsub!("-", "_")
      r << token
    }
    
    replacedArray << r
  }

  replacedArray
end


if ARGV.size == 0
  puts "usage: out2cpp inputfile"
  exit
end

inputFileName = ARGV[0]

vmSource = File.open(inputFileName) {|f|
  r = []
  f.each_line {|line|
    r << line.chomp
  }
  
  r
}


puts "creating tokens..."
tokens = tokenize(vmSource)
tokens = replace_scm_chars(tokens)
parsed = read_from(tokens)

puts "generating codes.."

labels = ["compiled_procedure_start"]
labels.concat parsed.select {|p| p.class === "String"}
labels.flatten

output_function_prototypes(labels)
output_goto_with_label(labels)

functionCodeGenerator = FunctionCodeGenerator.new labels, parsed
functionCodeGenerator.generate